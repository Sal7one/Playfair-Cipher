const alphabet=["a","b","c","d","e","f","g","h","i","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z",];let plainText="hello",cipherText="",key="Ahmed",grid=null,placeHolderLetter="x",gridElm=document.querySelector("#grid"),keyElm=document.querySelector("#key"),plainTextElm=document.querySelector("#plain"),cipherTextElm=document.querySelector("#cipher"),playfairkeyInput=document.querySelector("#playfairkey"),chiperPlainInput=document.querySelector("#chiperPlain"),encButton=document.querySelector("#encrypt"),decButton=document.querySelector("#decrypt"),globalPlainArray=[],globalCipherArray=[];function generateGrid(e){let l=e.replaceAll(/[^A-Za-z]/gi,"").replaceAll("j","i").toLowerCase().split(""),r=Array.from(new Set([...l,...alphabet])),t=[];for(;r.length;)t.push(r.splice(0,5));grid=t;let n="";for(i=0;i<t.length;i++)n+=buildLetterRow(t[i]);gridElm.innerHTML=n}function buildLetterRow(e){let l="";return e.forEach(e=>{l+=`<div class="letter" id="${e}">${e.toUpperCase()}</div>`}),`<div class="row">
   ${l}
  </div>`}function getChuncksOfString(e){let l="";for(let r=0;r<e.length;r++){let t=e[r];if(r+1!=e.length){let n=e[r+1];t==n?l+=t+placeHolderLetter:(l+=t+n,r++)}else l+=t}let a=[];for(var c=0,p=l.length;c<p;c+=2)a.push(l.substring(c,c+2));let o=a[a.length-1];return 1==o.length&&(a[a.length-1]=o+placeHolderLetter),a}function encrypt(e,l){let r=getChuncksOfString(e.replaceAll(" ","").replaceAll("j","i").toLowerCase()),t="";return r.forEach(e=>{let r=e[0],n=e[1],a=-1,c=-1,p=-1,o=-1;for(let u=0;u<l.length;u++){let s=l[u];-1!=s.indexOf(r)&&(a=u,c=s.indexOf(r)),-1!=s.indexOf(n)&&(p=u,o=s.indexOf(n))}if(a==p)5==++c&&(c=0),5==++o&&(o=0);else if(c==o)5==++a&&(a=0),5==++p&&(p=0);else{let y=c;c=o,o=y}t+=l[a][c],t+=l[p][o]}),t}function rebuildUI(){key=playfairkeyInput.value.replaceAll(" ","").toLowerCase();let e=chiperPlainInput.value.replaceAll(" ","").toLowerCase(),l=document.querySelector("#typeOfText");generateGrid(key),""!=e&&(keyElm.innerHTML=`Key: <span class="actualvalue"> ${playfairkeyInput.value} </span>`,encButton.checked?(l.innerHTML="Plain Text",plainTextElm.innerHTML=`Plain Text: <span class="actualvalue"> ${chiperPlainInput.value} </span>`,document.querySelector("#plainArray").innerHTML=`<span class="actualvalue"> ${"[   "+getChuncksOfString(e).join(",   ")+" ]"} </span>`,cipherText=encrypt(e,grid),globalPlainArray=getChuncksOfString(e),globalCipherArray=getChuncksOfString(cipherText),cipherTextElm.innerHTML=`Cipher Text: <span class="actualvalue"> ${cipherText.toUpperCase()} </span>`,document.querySelector("#cipherArray").innerHTML=`<span class="actualvalue"> ${"[   "+getChuncksOfString(cipherText).join(",   ")+" ]"} </span>`):decButton.checked&&(l.innerHTML="Cipher Text",plainTextElm.innerHTML=`Cipher Text: <span class="actualvalue"> ${chiperPlainInput.value} </span>`,document.querySelector("#plainArray").innerHTML="",cipherText=decrypt(e,grid),cipherTextElm.innerHTML=`Plain Text: <span class="actualvalue"> ${cipherText.toUpperCase()} </span>`,document.querySelector("#cipherArray").innerHTML="",globalPlainArray=getChuncksOfString(cipherText),globalCipherArray=getChuncksOfString(e)),document.querySelector(".playdiv").style.display="block")}function decrypt(e,l){let r=e.replaceAll(" ","").toLowerCase(),t=[];for(var n=0,a=r.length;n<a;n+=2)t.push(r.substring(n,n+2));let c="";return t.forEach(e=>{let r=e[0],t=e[1],n=0,a=0,p=0,o=0;for(let u=0;u<l.length;u++){let s=l[u];-1!=s.indexOf(r)&&(n=u,a=s.indexOf(r)),-1!=s.indexOf(t)&&(p=u,o=s.indexOf(t))}if(n==p)-1==--a&&(a=4),-1==--o&&(o=4);else if(a==o)-1==--n&&(n=4),-1==--p&&(p=4);else{let y=a;a=o,o=y}c+=l[n][a],c+=l[p][o]}),c}function playRealTime(){(0==globalPlainArray.length||0==globalCipherArray.length)&&alert("You need to Encrypt or Decrypt first");let e=document.querySelectorAll(".letter"),l=1e3;for(let r=0;r<globalPlainArray.length;r++)setTimeout(()=>{let l=globalCipherArray[r];document.querySelector(`#${l[0]}`).style.backgroundColor="red",document.querySelector(`#${l[1]}`).style.backgroundColor="red",setTimeout(()=>{let l=globalPlainArray[r];document.querySelector(`#${l[0]}`).style.backgroundColor="gold",document.querySelector(`#${l[1]}`).style.backgroundColor="gold",setTimeout(()=>{e.forEach(e=>{e.style.backgroundColor="teal"})},800)},700)},l),l+=2800}playfairkeyInput.addEventListener("input",rebuildUI),chiperPlainInput.addEventListener("input",rebuildUI),encButton.addEventListener("input",rebuildUI),decButton.addEventListener("input",rebuildUI),document.querySelector("#playbutton").addEventListener("click",playRealTime),rebuildUI();